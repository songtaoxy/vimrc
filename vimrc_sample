set runtimepath+=~/.vim_runtime

"execute pathogen#infect('bundle/{}', '~/.vim_runtime/my_plugins/{}')"
"execute pathogen#infect('~/.vim_runtime/my_plugins/{}')

source ~/.vim_runtime/configs.vim
source ~/.vim_runtime/vimrcs/basic.vim
source ~/.vim_runtime/vimrcs/filetypes.vim
source ~/.vim_runtime/vimrcs/plugins_config.vim
source ~/.vim_runtime/vimrcs/extended.vim
source ~/.vim_runtime/vim-plug/plug.vim

set tabstop=4                " 设置tab键的宽度
set shiftwidth=4             " 换行时行间交错使用4个空格
set autoindent               " 自动对齐
set cindent shiftwidth=4     " 自动缩进4空格
set smartindent              " 智能自动缩进
set ai!                      " 设置自动缩进

set guifont=Hack\ Nerd\ Font:h18

colorscheme desert
set background=dark

:set paste

" python3 install path and exectale file
" let g:python3_host_prog = '/usr/bin/python3'
let g:python3_host_prog = "/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9"



"
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
" call plug#begin('~/.vim/plugged')
call plug#begin('~/.vim_runtime/my_plugins')



" """"""""""""""""""""""""""coc start"""""""""""""""""""""""""""""""""""
" coc.vim 是一个为 Neovim/vim8 制作的智能提示引擎
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'https://hub.fastgit.org/neoclide/coc.nvim.git'

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    
endif


" vim-snippets, ultisnips have been install default. 
"Plug 'sirver/ultisnips'
"Plug 'https://hub.fastgit.org/SirVer/ultisnips.git'
"Plug 'honza/vim-snippets'
"Plug 'https://hub.fastgit.org/honza/vim-snippets.git'
" """"""""""""""""""""""""""coc end """""""""""""""""""""""""""""""""""


" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-airline/vim-airline'
let g:airline_theme='simple'
"let g:airline_theme='badwolf'
Plug 'https://hub.fastgit.org/vim-airline/vim-airline-themes.git'

" ##########################################
" 使用 <ctrl-/> 来注释、反注释代码
" Plug 'preservim/nerdcommenter'
Plug 'https://hub.fastgit.org/preservim/nerdcommenter.git'
nmap <C-_>   <Plug>NERDCommenterToggle
vmap <C-_>   <Plug>NERDCommenterToggle<CR>gv


" ##########################################
" 快速对齐
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

"Plug 'junegunn/fzf.vim'
Plug 'https://hub.fastgit.org/junegunn/fzf.vim.git' 


" """"""""""""""  vim-gitgutter """""""""""
Plug 'https://hub.fastgit.org/airblade/vim-gitgutter.git'


" ##########################################
"                 Defx                     #
" ##########################################
call defx#custom#option('_', {
      "\ 'winwidth': 30,
      \ 'winwidth': 18,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'buffer_name': '',
      \ 'toggle': 1,
      \ 'resume': 1
      \ })
" Shougo/defx.nvim
if has('nvim')
  "Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'https://hub.fastgit.org/Shougo/defx.nvim.git', { 'do': ':UpdateRemotePlugins' }
else
  "Plug 'Shougo/defx.nvim'
  "Plug 'roxma/nvim-yarp'
  "Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'https://hub.fastgit.org/Shougo/defx.nvim.git'
  Plug 'https://hub.fastgit.org/roxma/nvim-yarp.git'
  Plug 'https://hub.fastgit.org/roxma/vim-hug-neovim-rpc.git'
endif

nmap <silent> <Leader>e :Defx <cr>

autocmd FileType defx call s:defx_mappings()
function! s:defx_mappings() abort
  nnoremap <silent><buffer><expr> l     <SID>defx_toggle_tree()                    " 打开或者关闭文件夹，文件
  nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')     " 显示隐藏文件
  nnoremap <silent><buffer><expr> <C-r>  defx#do_action('redraw')
endfunction

function! s:defx_toggle_tree() abort
    " Open current file, or toggle directory expand/collapse
    if defx#is_directory()
        return defx#do_action('open_or_close_tree')
    endif
    return defx#do_action('multi', ['drop'])
endfunction

"Plug 'kristijanhusak/defx-icons'
Plug 'https://hub.fastgit.org/mattn/emmet-vim.git'


" ##########################################
" 缩进线
" Plug 'Yggdroot/indentLine'
Plug 'https://hub.fastgit.org/Yggdroot/indentLine.git'


" ##########################################
" Plug 'dense-analysis/ale'
Plug 'https://hub.fastgit.org/dense-analysis/ale.git'
let g:ale_sign_error = '>>'  " 自定义错误标志
let g:ale_sign_warning = '!'  " 自定义警告标志
" 指定修复 pep8 错误的 fixer
let g:ale_fixers = {'python': ['remove_trailing_lines', 'trim_whitespace', 'autopep8']}
nnoremap <C-S-l> :ALEFix<CR>  "修复语法和格式错误 ctr + shift + l"


" ##########################################
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'https://hub.fastgit.org/Xuyuanp/nerdtree-git-plugin.git'
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }
let g:NERDTreeGitStatusUseNerdFonts = 1 " you should install nerdfonts by yourself. default: 0
let g:NERDTreeGitStatusShowIgnored = 1 " a heavy feature may cost much more time. default: 0


" ##########################################
" Yet Another Remote Plugin Framework for Neovim
"Plug 'roxma/nvim-yarp'
Plug 'https://hub.fastgit.org/roxma/nvim-yarp.git'


" ##########################################
" This is an experimental project, trying to build a compatibility layer for neovim rpc client working on vim8. I started this project because I want to fix the vim8 support issue for nvim-completion-manager.
"Plug 'roxma/vim-hug-neovim-rpc'
Plug 'https://hub.fastgit.org/roxma/vim-hug-neovim-rpc.git'


" ##########################################
"
call plug#end()
